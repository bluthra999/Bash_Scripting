private fun createNotificationChannel() {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
        val importance = NotificationManager.IMPORTANCE_DEFAULT
        val channel = NotificationChannel(CHANNEL_ID, CHANNEL_NAME, importance).apply {
            description = CHANNEL_DESCRIPTION
        }
        val notificationManager: NotificationManager =
                getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.createNotificationChannel(channel)
    }
}
private fun createNotificationChannel() {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
        val importance = NotificationManager.IMPORTANCE_DEFAULT
        val channel = NotificationChannel(CHANNEL_ID, CHANNEL_NAME, importance).apply {
            description = CHANNEL_DESCRIPTION
        }
        val notificationManager: NotificationManager =
                getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.createNotificationChannel(channel)
    }
}

val builder = NotificationCompat.Builder(this, CHANNEL_ID)
    .setSmallIcon(R.drawable.ic_launcher_foreground)
    .setContentTitle("Interactive Notification Title")
    .setContentText("Interactive Notification Text")
val notSoInteractiveNotification = builder.build()

class InteractiveNotificationBroadcastReceiver : BroadcastReceiver() {

    override fun onReceive(context: Context?, intent: Intent?) {
        Log.d("InteractiveNotificationBroadcastReceiver", "onReceive")
    }

    companion object {
        fun newPendingIntent(context: Context): PendingIntent {
            val intent = Intent(context, InteractiveNotificationBroadcastReceiver::class.java)
            return PendingIntent.getBroadcast(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT)
        }
    }
}
val builder = NotificationCompat.Builder(this, CHANNEL_ID)
    .setSmallIcon(R.drawable.ic_launcher_foreground)
    .setContentTitle("Interactive Notification Title")
    .setContentText("Interactive Notification Text")
    .setContentIntent(InteractiveNotificationBroadcastReceiver.newPendingIntent(this))
val soCloseInteractiveNotification = builder.build()
override fun onReceive(context: Context?, intent: Intent?) {
    context?.let {
        Log.d("InteractiveNotificationBroadcastReceiver", "onReceive")
        val notification = NotificationCompat.Builder(context, CHANNEL_ID)
            .setSmallIcon(R.drawable.ic_launcher_foreground)
            .setContentTitle("Interactive Notification Title")
            .setContentText("MODIFIED text")
            .setContentIntent(newPendingIntent(context))
            .build()
        NotificationManagerCompat.from(context)
            .notify(INTERACTIVE_NOTIFICATION_ID, notification)
    }
}
.addAction(
    R.drawable.ic_launcher_foreground,
    "Increment",
    InteractiveNotificationBroadcastReceiver.newPendingIntent(context)
)